name: Deploy prod

on:
  # Trigger the action manually from the UI
  workflow_dispatch:
  # Trigger the action when I create or push a `release/**` branch
  push:
    branches:
      - 'main'
  pull_request:
    branches: 
      - 'main'

env:
  TFM_ACCESS_KEY: ${{ secrets.TFM_ACCESS_KEY }}
  TFM_SECRET_KEY: ${{ secrets.TFM_SECRET_KEY }}
  TF_VAR_token: ${{ secrets.YA_TKN }}
  TF_VAR_cloud_id: ${{ secrets.YA_CLOUD_ID }}
  TF_VAR_folder_id: ${{ secrets.YA_FOLDER_ID }}

jobs:
  deploy_terraform:
    name: Deploy hosts for kubernetes cluster
    environment: prod
    # Runner to use
    runs-on: notebook

    steps:
    - name: checkout code
      uses: actions/checkout@v4
    
    - name: terraform kuber init
      run: |
        cd ./kuber-init
        terraform init -backend-config="access_key=$TFM_ACCESS_KEY" -backend-config="secret_key=$TFM_SECRET_KEY"

    - name: terraform kuber apply
      run: |
        ls -la
        cd ./kuber-init
        terraform plan
        terraform apply -auto-approve

  deploy_kubernetes:
    needs: deploy_terraform
    name: Deploy kubernetes cluster
    environment: prod
    # Runner to use
    runs-on: notebook

    steps:
    - name: kubespray configure
      run: |
        cd ./kuber-init/ansible
        git clone https://github.com/kubernetes-sigs/kubespray
        cd kubespray
        python3.12 -m venv .venv
        .venv/bin/pip install --upgrade pip
        .venv/bin/pip install -r requirements.txt
        ln -sf -t playbooks ../roles
        # добавляю инвентори
        cp -rp inventory/sample/ inventory/cluster
        cp ../inventory.ini inventory/cluster/inventory.ini
        # копирую на локальную машину конфиг kubernetes
        sed -i 's/# kubeconfig_localhost: false/kubeconfig_localhost: true/' inventory/cluster/group_vars/k8s_cluster/k8s-cluster.yml
        sed -i 's/# supplementary_addresses_in_ssl_keys:.*/supplementary_addresses_in_ssl_keys: \[178.154.205.25\]/' inventory/cluster/group_vars/k8s_cluster/k8s-cluster.yml
    
    - name: kubespray ansible run
      run: | 
        cd ./kuber-init/ansible/kubespray
        export ANSIBLE_HOST_KEY_CHECKING=False
        .venv/bin/ansible-playbook -u admin --private-key ~/.ssh/nl-ya-ed25519 -i inventory/cluster/inventory.ini cluster.yml -b
    
    - name: copy kube.conf
      run: |
        mkdir -p ~/.kube
        cp ./kuber-init/ansible/kubespray/inventory/cluster/artifacts/admin.conf ~/.kube/config

  check_deploy:
    needs: deploy_kubernetes
    name: Check deploy kubernetes
    runs-on: notebook

    steps:
      - name: config kubeconfig
        run: |
          sed -i 's/server: https:\/\/.*/server: https:\/\/178.154.205.25:6443/' ~/.kube/config
      
      - name: test pods
        run: |
          kubectl get pods --all-namespaces

  deploy_prometheus:
    needs: check_deploy
    name: Deploy Prometheus
    runs-on: notebook

    steps:
      - name: prometheus configure
        run: |
          cd ./kuber-init/ansible/kube-prometheus-custom
          export GOPATH=$HOME/go
          export PATH=$PATH:$HOME/go/bin
          go install -a github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@latest
          go install github.com/brancz/gojsontoyaml@latest
          go install github.com/google/go-jsonnet/cmd/jsonnet@latest
          jb install github.com/prometheus-operator/kube-prometheus/jsonnet/kube-prometheus@main
          chmod +x build.sh
          ./build.sh

      - name: prometheus deploy
        run: |
          cd ./kuber-init/ansible/kube-prometheus-custom
          # установка Prometheus
          kubectl apply --server-side -f manifests/setup
          kubectl wait --for condition=Established --all CustomResourceDefinition --namespace=monitoring
          kubectl apply -f manifests/
  
  check_prometheus:
    needs: deploy_prometheus
    name: Check Prometheus
    runs-on: notebook

    steps:
      - name: prometheus pods check
        run: |
          kubectl get pods --namespace=monitoring
